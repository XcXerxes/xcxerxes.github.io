{"meta":{"title":"每天一点点，进步多一点...","subtitle":null,"description":"this is a web Front-end technology blog, includes html css vuejs reactjs liunx","author":"Leo","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-03-22T14:32:34.000Z","updated":"2018-03-22T14:57:16.610Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-03-22T14:32:24.000Z","updated":"2018-03-22T14:57:16.610Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"vuex基础篇","slug":"vuex基础篇","date":"2018-03-23T01:07:11.106Z","updated":"2018-03-23T01:10:55.131Z","comments":true,"path":"2018/03/23/vuex基础篇/","link":"","permalink":"http://yoursite.com/2018/03/23/vuex基础篇/","excerpt":"","text":"Vuex是一个专为 vue.js 开发的状态管理模式。它通过集中式的管理存储所有组件的状态，然后通过一定的规则保证状态以一种可预测的方式发生变化。 vuex(vue状态管理模式) image Vuex是一个专为 vue.js 开发的状态管理模式。它通过集中式的管理存储所有组件的状态，然后通过一定的规则保证状态以一种可预测的方式发生变化。 什么是’’状态管理模式’’? 首先用一个简单的 计数来说明：1 new Vue({ // state data(){ return { count:0 } }, //view template:` &lt;div&gt;{{ count }}&lt;/div&gt; `, // actions methods:{ increment(){ this.count++ } } }) ` 这个状态管理应用包含几个部分： state,当前组件的数据源 view，以声明式方式将state映射都视图上 actions, 响应用户操作 view时，状态的变化 但是，当有多个组件共享状态 时，单向数据流的简洁性就会被破坏： 多个视图依赖同一个状态， 来自不同视图的操作都需要改变同一状态 对于问题一，通过传参的方式，对于多层级嵌套的组件会非常繁琐，对于问题二，经常采用父子组件直接引用或者事件来变更状态。但这些模式都无法很好维护代码的状态。 而vuex,就在这种需求下应运而生。它将组件所有的共享状态抽取出来，以一种全局单例模式来管理状态。 另外，通过定义和隔离状态的一些规则，使代码更结构化且易维护。 什么情况下我应该使用Vuex? 当你需要构建一个中大型单页应用，您可能会考虑如何更好的组件外部管理状态，而Vuex就是最后的选择。 Vuex架构就像眼睛：您自会知道什么时候需要它","categories":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"},{"name":"Vuex","slug":"Vuex","permalink":"http://yoursite.com/tags/Vuex/"}]},{"title":"处理视频播放自适应屏幕","slug":"处理视频播放自适应屏幕","date":"2018-03-23T00:51:13.800Z","updated":"2018-03-23T00:56:16.928Z","comments":true,"path":"2018/03/23/处理视频播放自适应屏幕/","link":"","permalink":"http://yoursite.com/2018/03/23/处理视频播放自适应屏幕/","excerpt":"","text":"在现代浏览器中，对于H5播放器的支持度也越来越好了，之前开发的一个前端UI框架中，需要对视频播放进行封装，就发现了这个新的属性… object-fit通过 css属性 object-fit 修改视频相对于父元素的几种显示方式： 123456 fill &#123; object-fit: fill; &#125;.contain &#123; object-fit: contain; &#125;.cover &#123; object-fit: cover; &#125;.none &#123; object-fit: none; &#125;.scale-down &#123; object-fit: scale-down; &#125;每个属性值的具体含义如下（自己理解的白话文，官方释义见官网）： fill: 中文释义“填充”。默认值。替换内容拉伸填满整个content box, 不保证保持原有的比例。 contain: 中文释义“包含”。保持原有尺寸比例。保证替换内容尺寸一定可以在容器里面放得下。因此，此参数可能会在容器内留下空白。 cover: 中文释义“覆盖”。保持原有尺寸比例。保证替换内容尺寸一定大于容器尺寸，宽度和高度至少有一个和容器一致。因此，此参数可能会让替换内容（如图片）部分区域不可见。 none: 中文释义“无”。保持原有尺寸比例。同时保持替换内容原始尺寸大小。 scale-down: 中文释义“降低”。就好像依次设置了none或contain, 最终呈现的是尺寸比较小的那个。","categories":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}],"tags":[]},{"title":"基本的Lunix命令","slug":"liunx的基础命令","date":"2018-03-22T14:57:16.609Z","updated":"2018-03-22T14:57:16.610Z","comments":true,"path":"2018/03/22/liunx的基础命令/","link":"","permalink":"http://yoursite.com/2018/03/22/liunx的基础命令/","excerpt":"","text":"做为一个希望向全栈工程师方向发展的程序员，必须得懂一些Lunix方面的知识，这节简单介绍一些基础的命令，以供大家一起学习… 基本的Lunix命令：tree命令tree -d 只显示文件夹 tree -L n 显示项目的层级。 n 表示层级数。比如想要显示项目三层级结构， 可以用 1tree -L 3 // 显示三层级目录结构 tree -I pattern 用于过滤不想要显示的文件或者文件夹。比如想过滤掉 node_moudles 文件夹，可以使用 1tree -I &quot;node_modules&quot; tree &gt;tree.md 将项目结构输出到tree.md这个文件中,举个例子 1tree -L 3 -I &quot;node_modules&quot; // 输出三级目录结构 不包含 node_modules 文件夹","categories":[{"name":"Lunix系统","slug":"Lunix系统","permalink":"http://yoursite.com/categories/Lunix系统/"}],"tags":[{"name":"Lunix","slug":"Lunix","permalink":"http://yoursite.com/tags/Lunix/"}]}]}